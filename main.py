import streamlit as st
import pandas as pd
from sklearn.tree import DecisionTreeClassifier

# ========================
# 1Ô∏è‚É£ Page Config + CSS
# ========================
st.set_page_config(page_title="Samsung Predictor", layout="centered")

# --- Custom CSS ---
st.markdown(
    """
    <style>
    /* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤ */
    .stApp {
        background-color: #f8f9fa;
    }

    /* Card input */
    .card {
        background: #ffffff;
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0px 4px 12px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }

    /* ‡∏õ‡∏∏‡πà‡∏° */
    button[kind="primary"] {
        background: linear-gradient(90deg, #0072ff, #00c6ff);
        color: white;
        border-radius: 12px;
        padding: 10px 20px;
        font-weight: bold;
        border: none;
        transition: 0.3s;
    }
    button[kind="primary"]:hover {
        background: linear-gradient(90deg, #00c6ff, #0072ff);
        transform: scale(1.05);
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ========================
# 2Ô∏è‚É£ Title (Styled)
# ========================
st.markdown(
    """
    <div style="
        background: linear-gradient(90deg, #0072ff, #00c6ff);
        padding: 18px;
        border-radius: 15px;
        box-shadow: 0px 4px 12px rgba(0,0,0,0.2);
        text-align: center;
        margin-bottom: 20px;
    ">
        <h1 style="
            color: white;
            font-weight: bold;
            font-size: 36px;
            margin: 0;
        ">
            üì± Guess Your Samsung!
        </h1>
    </div>
    """,
    unsafe_allow_html=True
)

st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Samsung ‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì")
st.markdown("---")

# ========================
# 3Ô∏è‚É£ Dataset
# ========================
try:
    df = pd.read_pickle("Cleansamsung.pkl")
except:
    data = {
        '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏ö‡∏≤‡∏ó)': [0, 1, 2, 3],
        '‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å': [1, 2, 3, 4],
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á': [1, 2, 3, 1],
        '‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠': [1, 2, 3, 1],
        '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ S Pen': [0, 2, 0, 2],
        '‡∏ä‡∏≠‡∏ö‡∏à‡∏≠‡∏û‡∏±‡∏ö‡πÑ‡∏î‡πâ': [0, 2, 0, 2],
        '‡πÉ‡∏ä‡πâ Samsung ‡∏£‡∏∏‡πà‡∏ô‡πÑ‡∏´‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô': ['Galaxy A', 'Galaxy S', 'Galaxy Z', 'Galaxy Note']
    }
    df = pd.DataFrame(data)

#with st.expander("üìä ‡∏î‡∏π Dataset ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•"):
#    st.dataframe(df)

X = df[['‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏ö‡∏≤‡∏ó)', '‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á',
        '‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠', '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ S Pen', '‡∏ä‡∏≠‡∏ö‡∏à‡∏≠‡∏û‡∏±‡∏ö‡πÑ‡∏î‡πâ']]
y = df['‡πÉ‡∏ä‡πâ Samsung ‡∏£‡∏∏‡πà‡∏ô‡πÑ‡∏´‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô']

model = DecisionTreeClassifier()
model.fit(X, y)

# ========================
# 4Ô∏è‚É£ Input Section
# ========================
st.markdown("<div class='card'>", unsafe_allow_html=True)
st.subheader("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

col1, col2, col3 = st.columns(3)

with col1:
    budget = st.radio(
        "üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
        options=[0, 1, 3, 2],
        format_func=lambda x: {
            0: "0 ‚Äì 9,999 ‡∏ö‡∏≤‡∏ó",
            1: "10,000 ‚Äì 25,000 ‡∏ö‡∏≤‡∏ó",
            3: "25,001 ‚Äì 40,000 ‡∏ö‡∏≤‡∏ó",
            2: "40,001 ‚Äì 60,000 ‡∏ö‡∏≤‡∏ó"
        }[x]
    )
    main_use = st.radio(
        "üñ•Ô∏è ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å",
        options=[1, 2, 3, 4],
        format_func=lambda x: {
            1: "‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
            2: "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
            3: "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°",
            4: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ"
        }[x]
    )

with col2:
    camera = st.radio(
        "üì∑ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á",
        options=[1, 3, 2],
        format_func=lambda x: {
            1: "‡∏™‡∏π‡∏á",
            3: "‡∏Å‡∏•‡∏≤‡∏á",
            2: "‡∏ï‡πà‡∏≥"
        }[x]
    )
    screen = st.radio(
        "üì∫ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠",
        options=[1, 2, 3],
        format_func=lambda x: {
            1: "‡πÄ‡∏•‡πá‡∏Å (<6.0\")",
            2: "‡∏Å‡∏•‡∏≤‡∏á (6.0 ‚Äì 6.7\")",
            3: "‡πÉ‡∏´‡∏ç‡πà (>6.7\")"
        }[x]
    )

with col3:
    s_pen = st.radio(
        "‚úèÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ S Pen",
        options=[0, 2],
        format_func=lambda x: {
            0: "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
            2: "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
        }[x]
    )
    foldable = st.radio(
        "üìê ‡∏ä‡∏≠‡∏ö‡∏à‡∏≠‡∏û‡∏±‡∏ö‡πÑ‡∏î‡πâ",
        options=[0, 2],
        format_func=lambda x: {
            0: "‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö",
            2: "‡∏ä‡∏≠‡∏ö"
        }[x]
    )
st.markdown("</div>", unsafe_allow_html=True)

# ========================
# 5Ô∏è‚É£ Prediction
# ========================
if st.button("üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Samsung ‡∏£‡∏∏‡πà‡∏ô", use_container_width=True):
    user_input = pd.DataFrame({
        '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏ö‡∏≤‡∏ó)': [budget],
        '‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å': [main_use],
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á': [camera],
        '‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠': [screen],
        '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ S Pen': [s_pen],
        '‡∏ä‡∏≠‡∏ö‡∏à‡∏≠‡∏û‡∏±‡∏ö‡πÑ‡∏î‡πâ': [foldable]
    })
    predicted_model = model.predict(user_input)

    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.success(f"üéâ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Samsung ‡∏£‡∏∏‡πà‡∏ô: **{predicted_model[0]}**", icon="‚úÖ")
    st.markdown("</div>", unsafe_allow_html=True)